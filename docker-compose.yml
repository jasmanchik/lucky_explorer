version: '3'
services:

    app:
        build:
            context: .
            dockerfile: ./docker/php/Dockerfile
        container_name: app
        restart: unless-stopped
        tty: true
        environment:
            SERVICE_NAME: app
            SERVICE_TAGS: dev
        working_dir: /var/www
        volumes:
            - ./:/var/www
            - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
        depends_on:
            - db
            - redis
        networks:
            - app-network

    webserver:
        image: nginx:alpine
        container_name: webserver
        restart: unless-stopped
        tty: true
        ports:
            - "8080:80"
            - "443:443"
        volumes:
            - ./:/var/www
            - ./docker/nginx/conf.d/:/etc/nginx/conf.d/
        networks:
            - app-network

    db:
        image: mysql:8.0.25
        container_name: db
        restart: unless-stopped
        tty: true
        ports:
            - "3306:3306"
        environment:
            MYSQL_DATABASE: lucky_explorer
            MYSQL_USER: lucky_explorer
            MYSQL_PASSWORD: root
            MYSQL_ROOT_PASSWORD: root
            SERVICE_TAGS: dev
            SERVICE_NAME: mysql
        volumes:
            - db-data:/var/lib/mysql
            - ./docker/mysql/my.cnf:/etc/mysql/my.cnf:ro
        networks:
            - app-network

    redis:
        image: redis:6.2.2-alpine
        restart: always
        container_name: app_redis
        command: redis-server
        volumes:
            - redis-data:/data
        ports:
            - "6379:6379"
        networks:
            - app-network

    phpmyadmin:
        image: phpmyadmin
        restart: always
        links:
            - db
        ports:
            - "8081:80"
        environment:
            PMA_ARBITRARY: 1
            PMA_HOST: db
            PMA_PORT: 3306
            PMA_USER: lucky_explorer
            PMA_PASSWORD: root
        networks:
            - app-network

networks:
    app-network:
        driver: bridge

volumes:
    db-data:
        driver: local
    redis-data:
        driver: local